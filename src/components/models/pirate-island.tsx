/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 captain_ship_island.glb --transform 
Files: captain_ship_island.glb [8.74MB] > C:\Users\mitul\Downloads\captain_ship_island-transformed.glb [1.03MB] (88%)
*/

import React, { useEffect } from "react";
import { useGraph, useThree } from "@react-three/fiber";
import { useGLTF, useAnimations, Html } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import PirateIsland from "@/assets/captain_ship_island-transformed.glb";
import Ship from "@/assets/ship_custom.glb";
import { Mesh, SkinnedMesh, Vector3 } from "three";
import gsap from "gsap";

export default function Model(props: any) {
  const { camera } = useThree(); // Access to the camera

  // const dir = useRef<DirectionalLight>(null!);
  // useHelper(dir, DirectionalLightHelper, 1, "red");
  // const meshRef = useRef(null!);
  // const [position, setPosition] = useState([0, 0, 0]);
  // const [rotation, setRotation] = useState([0, 0, 0]);

  // Update the position and rotation every frame
  // useFrame(() => {
  //   if (meshRef.current) {
  //     const pos = meshRef.current.position;
  //     const rot = meshRef.current.rotation;
  //     console.log("position: ", pos);
  //     // setPosition([pos.x, pos.y, pos.z]);
  //     // setRotation([rot.x, rot.y, rot.z]);
  //   }
  // });

  const focusOnObject = (objectPosition: Vector3) => {
    gsap.to(camera.position, {
      x: objectPosition.x + 10, // Offset slightly for a better view
      y: objectPosition.y + 5,
      z: objectPosition.z + 15,
      duration: 2,
      ease: "power2.inOut",
    });

    gsap.to(camera.rotation, {
      x: 0, // Set rotation for a better angle if necessary
      y: 0,
      z: 0,
      duration: 2,
      ease: "power2.inOut",
    });
  };

  useEffect(() => {
    gsap.fromTo(
      camera.position,
      {
        x: 0, // New X position
        y: 10, // New Y position
        z: 50, // New Z position
        duration: 3, // Animation duration in seconds
        ease: "power2.inOut", // Easing function
      },
      {
        ...props.cameraPosition,
        duration: 3, // Animation duration in seconds
        ease: "power2.inOut", // Easing function
      }
    );

    // Optionally, animate the camera's rotation as well
    gsap.fromTo(
      camera.rotation,
      {
        x: Math.PI / 4, // New X rotation
        y: Math.PI / 4, // New Y rotation
        z: 0, // New Z rotation
        duration: 3,
        ease: "power2.inOut",
      },
      {
        ...props.cameraRotation,
        duration: 3,
        ease: "power2.inOut",
      }
    );
  }, []);

  const group = React.useRef();
  const { scene, animations } = useGLTF(PirateIsland);
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { materials: shipMaterials } = useGLTF(Ship);

  const { actions } = useAnimations(animations, group);
  useEffect(() => {
    if (actions) {
      const idleAnimation = actions["Idle"];
      const animationAction = actions["Wave"];
      if (animationAction) {
        animationAction.play();
      }
    }
  }, [actions]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group
          name="CharacterArmature"
          position={[21.745, 12.545, 105.041]}
          scale={3.733}
        >
          <primitive object={nodes.Root} />
        </group>
        <mesh
          name="Ship_Large"
          geometry={(nodes.Ship_Large as Mesh).geometry}
          material={shipMaterials["Atlas.003"]}
          position={[2.278, 2.838, 98.04]}
          rotation={[0, -0.395, 0]}
          scale={4.983}
        />
        <mesh
          name="barrel_plank009_Building_0"
          geometry={(nodes.barrel_plank009_Building_0 as Mesh).geometry}
          material={materials.Building}
          position={[-14.263, 5.015, -18.203]}
          rotation={[2.092, -0.618, 2.351]}
          scale={0.524}
        />
        <mesh
          name="Box754_environment_0"
          geometry={(nodes.Box754_environment_0 as Mesh).geometry}
          material={materials.environment}
          position={[-47.034, 1.344, 21.926]}
          rotation={[-1.518, -0.083, 1.222]}
        />
        <mesh
          name="Object022_Material_#61_0"
          geometry={(nodes["Object022_Material_#61_0"] as Mesh).geometry}
          material={materials.Material_61}
          position={[-10.326, 0.4, -0.836]}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <mesh
          name="Sea_sea_0"
          geometry={(nodes.Sea_sea_0 as Mesh).geometry}
          material={materials.material_3}
          position={[0, 0.264, 0.206]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.055}
        />
        <mesh
          name="Sky_sky_0"
          geometry={(nodes.Sky_sky_0 as Mesh).geometry}
          material={materials.material}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.055}
        />
        <skinnedMesh
          name="Captain_Barbarossa_"
          geometry={(nodes.Captain_Barbarossa_ as Mesh).geometry}
          material={materials["Atlas.001"]}
          skeleton={(nodes.Captain_Barbarossa_ as SkinnedMesh).skeleton}
          position={[21.745, 12.545, 105.041]}
          scale={3.733}
        />
        <Html position={[21.745, 12.545, 105.041]} distanceFactor={10} center>
          <button
            style={{
              padding: "8px 16px",
              background: "orange",
              border: "none",
              cursor: "pointer",
            }}
            onClick={() => focusOnObject(new Vector3(21.745, 12.545, 105.041))}
          >
            Focus on Captain
          </button>
        </Html>

        <skinnedMesh
          name="Ernest"
          geometry={(nodes.Ernest as Mesh).geometry}
          material={materials["Atlas.001"]}
          skeleton={(nodes.Ernest as SkinnedMesh).skeleton}
          position={[21.745, 12.545, 105.041]}
          scale={3.733}
        />
      </group>
    </group>
  );
}

// useGLTF.preload('/captain_ship_island-transformed.glb')
